{
  "id": "/2010/07/05/developpement-css3-compatible-multi-navigateurs-avec-modernizr-et-ecsstender",
  "title": "Développement CSS3 compatible multi-navigateurs avec Modernizr et eCSStender",
  "url": "http://localhost:4000/2010/07/05/developpement-css3-compatible-multi-navigateurs-avec-modernizr-et-ecsstender/",
  "date": 1278325778,
  "html": "<p>Que des soucis c'est nouvelles règles CSS3. On s'extasie devant la possibilité d'intégrer quelques coins arrondis sur Firefox, Webkit et Opéra et dès qu'on exploite un peu le filon, on se rend compte que les techniques d'exploitation se multiplient.</p>\n<p>On peut choisir de ne pas utiliser de règles CSS3, d'en exploiter certaines ou encore de se servir de toutes mais de ne pas prendre en compte l'ensemble de navigateurs. En effet, les propriétés ne sont pas encore tout à fait implémentées dans les navigateurs et chacun utilise ce qu'on nomme des préfixes pour les produire : <strong>-webkit-border-radius: 12px; -moz-border-radius: 12px; border-radius: 12px;</strong></p>\n<div class=\"center\"><a href=\"http://static.bertrandkeller.info/2010/07/ALA308_eCSStender_final.jpg\"><img src=\"{{ site.baseurl }}/assets/ALA308_eCSStender_final.jpg\" alt=\"\" title=\"A list apart\" width=\"540\" height=\"216\" class=\"aligncenter size-full wp-image-2506\" /></a></div>\n<p>Le problème fondamental reste garantir un code compatible dans le temps (1 an, 2 ans, 5 ans...). Comment écrire un code simple, court, lisible, facilement modifiable et compatible au court du temps avec les avancées probables des navigateurs ?</p>\n<h3>Modernizr</h3>\n<p>La première solution est d'utiliser Modernizr. Ce script teste la compatibilité du navigateur de l'utilisateur avec les règles CSS3 ou autres. En fonction des capacités du navigateur, le script ajoute un préfixe (no-) sur la classe appliquée dans le code CSS.</p>\n<p>Ainsi, on déclare dans un sélecteur le code pour les navigateurs qui supportent une propriété, on déclare dans un autre sélecteur le code préfixe (avec le préfixe no-) pour les navigateurs qui ne supporte pas la propriété.</p>\n<p>Sans appeler de feuilles particulières, Modernizr va modifier le code de la page en HTML pour que le style adapté aux capacités du navigateur s'affiche.</p>\n<p>Enorme avantage de ne pas cibler un navigateur mais bien une propriété en particulier, avec son alternative.</p>\n<p>Lire <a href=\"http://www.alistapart.com/articles/taking-advantage-of-html5-and-css3-with-modernizr/\" title=\"Taking Advantage of HTML5 and CSS3 with Modernizr\">Taking Advantage of HTML5 and CSS3 with Modernizr</a>.</p>\n<h3>eCSStender</h3>\n<p>Autre couche JavaScript sur l'interprétation des feuilles de style, eCSStender  script qui permet de ne plus jongler les propriétés préfixées par moteur de rendu (-moz, -webkit, -o, -khtml...).</p>\n<p>Souvent le travailleur du web imagine les utilisateurs comme lui, souvent exactement comme lui : un mac avec Safari et Firefox. Sauf que les moteurs de rendus ne sont pas au nombre de 2 mais sont plus diversifiées que ça.</p>\n<p>Donc quand on déclare une propriété comme : <strong>-webkit-border-top-left-radius: 10px;-webkit-border-top-right-radius: 5px;-webkit-border-bottom-right-radius: 10px;-webkit-border-bottom-left-radius: 5px;</strong>.</p>\n<p>On est très content, c'est beau, sauf que quand on nous demande de l'appliquer à l'ensemble des navigateurs, ça peut devenir : <strong>border-radius: 10px 5px;-moz-border-radius: 10px 5px;-webkit-border-top-left-radius: 10px;-webkit-border-top-right-radius: 5px;-webkit-border-bottom-right-radius: 10px;-webkit-border-bottom-left-radius: 5px;-o-border-radius: 10px 5px;-khtml-border-top-left-radius: 10px;-khtml-border-top-right-radius: 5px;-khtml-border-bottom-right-radius: 10px;-khtml-border-bottom-left-radius: 5px;</strong></p>\n<p>Appliquer des petits coins arrondis demandent donc d'appliquer des hacks spécifiques à chaque navigateur. Cette façon de procéder allonge le code mais augmente, de même, le nombre d'erreurs possibles.</p>\n<p>Script eCSStender vient à mon aide. On disait que quand j'écrivais une propriété du type : <strong>border-radius: 5px;</strong> ; toi tu t'arrangeais pour sortir au navigateur ce qu'il comprend ; le machin avec les préfixes.</p>\n<p>Comme ça moi, j'écris du CSS3 de manière idéale, mon code est propre, court et en plus si jamais, un jour, un nouveau moteur sort avec son préfixe à lui, j'ai juste à mettre à jour mon fichier .js.</p>\n<p>Lire <a href=\"http://www.alistapart.com/articles/stop-forking-with-css3/\" title=\"Stop Forking with CSS3\">Stop Forking with CSS3</a>.</p>\n<h3>Conclusion</h3>\n<p>Certes Modernizr et eCSStender sont deux scripts JavaScript, leur utilisation augmente le poids de la page à télécharger. Cependant, leur utilisation permet, d'une part, d'écrire un code spécifique (dégradé) pour les navigateurs qui n'ont pas implémentés certaines propriétés et, d'autre part, de ne plus surcharger son code avec des spécificités particulières à chaque navigateur.</p>\n",
  "markdown": "<p>Que des soucis c'est nouvelles règles CSS3. On s'extasie devant la possibilité d'intégrer quelques coins arrondis sur Firefox, Webkit et Opéra et dès qu'on exploite un peu le filon, on se rend compte que les techniques d'exploitation se multiplient.</p>\n<p>On peut choisir de ne pas utiliser de règles CSS3, d'en exploiter certaines ou encore de se servir de toutes mais de ne pas prendre en compte l'ensemble de navigateurs. En effet, les propriétés ne sont pas encore tout à fait implémentées dans les navigateurs et chacun utilise ce qu'on nomme des préfixes pour les produire : <strong>-webkit-border-radius: 12px; -moz-border-radius: 12px; border-radius: 12px;</strong></p>\n<div class=\"center\"><a href=\"http://static.bertrandkeller.info/2010/07/ALA308_eCSStender_final.jpg\"><img src=\"{{ site.baseurl }}/assets/ALA308_eCSStender_final.jpg\" alt=\"\" title=\"A list apart\" width=\"540\" height=\"216\" class=\"aligncenter size-full wp-image-2506\" /></a></div>\n<p>Le problème fondamental reste garantir un code compatible dans le temps (1 an, 2 ans, 5 ans...). Comment écrire un code simple, court, lisible, facilement modifiable et compatible au court du temps avec les avancées probables des navigateurs ?</p>\n<h3>Modernizr</h3>\n<p>La première solution est d'utiliser Modernizr. Ce script teste la compatibilité du navigateur de l'utilisateur avec les règles CSS3 ou autres. En fonction des capacités du navigateur, le script ajoute un préfixe (no-) sur la classe appliquée dans le code CSS.</p>\n<p>Ainsi, on déclare dans un sélecteur le code pour les navigateurs qui supportent une propriété, on déclare dans un autre sélecteur le code préfixe (avec le préfixe no-) pour les navigateurs qui ne supporte pas la propriété.</p>\n<p>Sans appeler de feuilles particulières, Modernizr va modifier le code de la page en HTML pour que le style adapté aux capacités du navigateur s'affiche.</p>\n<p>Enorme avantage de ne pas cibler un navigateur mais bien une propriété en particulier, avec son alternative.</p>\n<p>Lire <a href=\"http://www.alistapart.com/articles/taking-advantage-of-html5-and-css3-with-modernizr/\" title=\"Taking Advantage of HTML5 and CSS3 with Modernizr\">Taking Advantage of HTML5 and CSS3 with Modernizr</a>.</p>\n<h3>eCSStender</h3>\n<p>Autre couche JavaScript sur l'interprétation des feuilles de style, eCSStender  script qui permet de ne plus jongler les propriétés préfixées par moteur de rendu (-moz, -webkit, -o, -khtml...).</p>\n<p>Souvent le travailleur du web imagine les utilisateurs comme lui, souvent exactement comme lui : un mac avec Safari et Firefox. Sauf que les moteurs de rendus ne sont pas au nombre de 2 mais sont plus diversifiées que ça.</p>\n<p>Donc quand on déclare une propriété comme : <strong>-webkit-border-top-left-radius: 10px;-webkit-border-top-right-radius: 5px;-webkit-border-bottom-right-radius: 10px;-webkit-border-bottom-left-radius: 5px;</strong>.</p>\n<p>On est très content, c'est beau, sauf que quand on nous demande de l'appliquer à l'ensemble des navigateurs, ça peut devenir : <strong>border-radius: 10px 5px;-moz-border-radius: 10px 5px;-webkit-border-top-left-radius: 10px;-webkit-border-top-right-radius: 5px;-webkit-border-bottom-right-radius: 10px;-webkit-border-bottom-left-radius: 5px;-o-border-radius: 10px 5px;-khtml-border-top-left-radius: 10px;-khtml-border-top-right-radius: 5px;-khtml-border-bottom-right-radius: 10px;-khtml-border-bottom-left-radius: 5px;</strong></p>\n<p>Appliquer des petits coins arrondis demandent donc d'appliquer des hacks spécifiques à chaque navigateur. Cette façon de procéder allonge le code mais augmente, de même, le nombre d'erreurs possibles.</p>\n<p>Script eCSStender vient à mon aide. On disait que quand j'écrivais une propriété du type : <strong>border-radius: 5px;</strong> ; toi tu t'arrangeais pour sortir au navigateur ce qu'il comprend ; le machin avec les préfixes.</p>\n<p>Comme ça moi, j'écris du CSS3 de manière idéale, mon code est propre, court et en plus si jamais, un jour, un nouveau moteur sort avec son préfixe à lui, j'ai juste à mettre à jour mon fichier .js.</p>\n<p>Lire <a href=\"http://www.alistapart.com/articles/stop-forking-with-css3/\" title=\"Stop Forking with CSS3\">Stop Forking with CSS3</a>.</p>\n<h3>Conclusion</h3>\n<p>Certes Modernizr et eCSStender sont deux scripts JavaScript, leur utilisation augmente le poids de la page à télécharger. Cependant, leur utilisation permet, d'une part, d'écrire un code spécifique (dégradé) pour les navigateurs qui n'ont pas implémentés certaines propriétés et, d'autre part, de ne plus surcharger son code avec des spécificités particulières à chaque navigateur.</p>\n"
}